version: 2.1

parameters:
  workflow:
    type: enum
    default: test
    description: The workflow to trigger.
    enum: [test, deploy]

orbs:
  node: circleci/node@4.7

executors:
  node:
    docker:
      - image: cimg/node:18.17.1
  node_and_mongo:
    docker:
      - image: cimg/node:18.17.1
      - image: mongo:6.0

commands:
  start_server:
    description: 'Start server and wait'
    steps:
      - run:
          name: Start server
          command: npx nx run server:serve:production
          environment:
            MONGODB_URI: mongodb://localhost:27017
            MONGODB_DATABASE_NAME: url-shortener
            SERVER_DOMAIN: sh.rt
            CLIENT_ORIGIN: https://client-origin-for-cors.com
          background: true
      - run:
          name: Wait for server to start
          command: sleep 15

jobs:
  lint_and_unit_test:
    executor: node
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Lint affected projects
          command: npx nx affected:lint --base=HEAD~1 --head=HEAD
      - run:
          name: Run unit tests for affected projects
          command: npx nx affected:test --base=HEAD~1 --head=HEAD --testPathIgnorePatterns=mongoUrlStorage.test.ts,providerContract.test.ts

  mongodb_integration_test:
    executor: node_and_mongo
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Run test
          command: npx nx test server --testFile=tests/mongoUrlStorage.test.ts

  contract_test:
    executor: node
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Run contract test
          command: npx nx test server --testFile=tests/providerContract.test.ts

  server_e2e_test:
    executor: node_and_mongo
    environment:
      PORT: 3000
    steps:
      - checkout
      - node/install-packages
      - start_server
      - run:
          name: Run e2e test
          command: npx nx run server-e2e:e2e

  load_test:
    executor: node_and_mongo
    environment:
      PORT: 3000
    steps:
      - checkout
      - node/install-packages
      - start_server
      - run:
          name: Execute load tests
          command: npx artillery run packages/server/tests/restapi-load/load-test.yml

  dynamic_security_test:
    docker:
      - image: cimg/node:18.17.1
      - image: mongo:6.0
      - image: owasp/zap2docker-stable
        command: sleep 20m
    environment:
      PORT: 3000
    steps:
      - checkout
      - node/install-packages
      - start_server
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - run:
          name: Execute ZAP API tests
          command: |
            export ZAP=$(docker ps -qf "ancestor=owasp/zap2docker-stable")
            docker exec $ZAP mkdir -p /zap/wrk/
            docker cp ./packages/server/src/adapter-restapi-express/apiSpec.yml $ZAP:/zap/wrk/apiSpec.yml
            docker exec $ZAP zap-api-scan.py -t apiSpec.yml -f openapi -d -g conf -I -r report.html
            docker cp $ZAP:/zap/wrk/report.html ./report.html
      - store_artifacts:
          path: ./report.html
          destination: zap_report

  deploy:
    docker:
      - image: cimg/deploy:2023.09
    steps:
      - checkout
      - run:
          name: Deploy client to Render
          command: |
            curl -f $RENDER_CLIENT_DEPLOY_HOOK
      - run:
          name: Deploy server to Render
          command: |
            curl -f $RENDER_SERVER_DEPLOY_HOOK
workflows:
  build_and_test:
    when: { equal: [test, << pipeline.parameters.workflow >>] }
    jobs:
      - lint_and_unit_test
      - mongodb_integration_test:
          requires:
            - lint_and_unit_test
      - contract_test:
          requires:
            - lint_and_unit_test
      - server_e2e_test:
          requires:
            - lint_and_unit_test
      - load_test:
          requires:
            - mongodb_integration_test
            - contract_test
            - server_e2e_test
      - dynamic_security_test:
          requires:
            - mongodb_integration_test
            - contract_test
            - server_e2e_test
  deploy:
    when: { equal: [deploy, << pipeline.parameters.workflow >>] }
    jobs:
      - deploy
